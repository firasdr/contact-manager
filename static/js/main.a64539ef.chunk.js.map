{"version":3,"sources":["components/layout/Header.js","components/pages/About.js","components/pages/NotFoundPage.js","context.js","components/contact/Contact.js","components/contact/Contacts.js","components/layout/TextInputGroup.js","components/contact/AddContact.js","components/contact/EditContact.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","branding","className","href","to","defaultProps","About","NotFoundPage","Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","onClick","style","cursor","float","color","bind","marginRight","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","EditContact","match","params","updateContact","put","Test","title","body","fetch","then","response","json","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a64539ef.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst Header = (props) => {\n  const { branding } = props;\n  return (\n    <nav className='navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0'>\n      <div className='container'>\n        <a href='/' className='navbar-brand'>\n          {branding}\n        </a>\n        <div>\n          <ul className='navbar-nav mr-auto'>\n            <li className='nav-item'>\n              <Link to='/' className='nav-link'>\n                <i className='fas fa-home'></i> Home\n              </Link>\n            </li>\n\n            <li className='nav-item'>\n              <Link to='/contact/add' className='nav-link'>\n                <i className='fas fa-plus'></i> Add\n              </Link>\n            </li>\n\n            <li className='nav-item'>\n              <Link to='/about' className='nav-link'>\n                <i className='fas fa-question'></i> About\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nHeader.defaultProps = {\n  branding: 'My App',\n};\n\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\n\nconst About = () => {\n  return (\n    <div>\n      <h1 className='display-4'>About Contact Manager App</h1>\n      <p className='lead'>Simple Application to manage contacts</p>\n      <p className='text-secondary'>Version 1.00</p>\n    </div>\n  );\n};\n\nexport default About;\n","import React from 'react';\n\nexport default function NotFoundPage() {\n  return (\n    <div>\n      <h1 className='display-4'>\n        <span className='text-danger'>404</span>Page Not Found\n      </h1>\n      <p className='lead'>Sorry, That page not exist</p>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'DELETE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id !== action.payload\n        ),\n      };\n    case 'ADD_CONTACT':\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n      };\n    case 'UPDATE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact.id === action.payload.id\n            ? (contact = contact.payload)\n            : contact\n        ),\n      };\n    default:\n      return state;\n  }\n};\n\nexport class Provider extends Component {\n  state = {\n    contacts: [\n      // {\n      //   id: 1,\n      //   name: 'John Doe',\n      //   email: 'jdoe@gmail.com',\n      //   phone: '555-555-5555',\n      // },\n      // {\n      //   id: 2,\n      //   name: 'Stephen Curry',\n      //   email: 'steph@gmail.com',\n      //   phone: '444-444-4444',\n      // },\n      // {\n      //   id: 3,\n      //   name: 'Lebron James',\n      //   email: 'james@gmail.com',\n      //   phone: '111-111-11111',\n      // },\n    ],\n    dispatch: (action) => {\n      this.setState((state) => reducer(state, action));\n    },\n  };\n\n  async componentDidMount() {\n    const res = await axios.get('https://jsonplaceholder.typicode.com/users');\n    this.setState({ contacts: res.data });\n  }\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Consumer } from '../../context';\nimport axios from 'axios';\n\nclass Contact extends Component {\n  // state of show contact infos\n  state = {\n    showContactInfo: false,\n  };\n\n  onDeleteClick = async (id, dispatch) => {\n    try {\n      await axios.delete(`https://jsonplaceholder.typicode.com/users${id}`);\n      dispatch({ type: 'DELETE_CONTACT', payload: id });\n    } catch (e) {\n      dispatch({ type: 'DELETE_CONTACT', payload: id });\n    }\n  };\n\n  render() {\n    //const { contact } = this.props;\n    const { id, name, email, phone } = this.props.contact;\n\n    // we must calll showContactInfo state to use it in this class\n    const { showContactInfo } = this.state;\n\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className='card card-body mb-3'>\n              <h4>\n                {name}{' '}\n                <i\n                  onClick={() =>\n                    this.setState({\n                      showContactInfo: !this.state.showContactInfo,\n                    })\n                  }\n                  className='fas fa-sort-down'\n                  style={{ cursor: 'pointer' }}\n                ></i>\n                <i\n                  className='fas fa-times'\n                  style={{ cursor: 'pointer', float: 'right', color: 'red' }}\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\n                ></i>\n                <Link to={`contact/edit/${id}`}>\n                  <i\n                    className='fas fa-pencil-alt'\n                    style={{\n                      cursor: 'pointer',\n                      float: 'right',\n                      color: 'black',\n                      marginRight: '1rem',\n                    }}\n                  ></i>\n                </Link>\n              </h4>\n\n              {showContactInfo ? (\n                <ul className='list-group'>\n                  <li className='list-group-item'>Email:{email}</li>\n                  <li className='list-group-item'>Phone: {phone}</li>\n                </ul>\n              ) : null}\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport Contact from './Contact';\nimport { Consumer } from '../../context';\n\nclass Contacts extends Component {\n  render() {\n    return (\n      <Consumer>\n        {(value) => {\n          const { contacts } = value;\n          return (\n            <React.Fragment>\n              <h1 className='display-4 mb-2'>\n                <span className='text-danger'>Contact</span> List\n              </h1>\n              {contacts.map((contact) => (\n                <Contact key={contact.id} contact={contact} />\n              ))}\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default Contacts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TextInputGroup = ({\n  name,\n  label,\n  type,\n  placeholder,\n  value,\n  onChange,\n  error,\n}) => {\n  return (\n    <div className='form-group'>\n      <label htmlFor={name}>{label}</label>\n      <input\n        type={type}\n        name={name}\n        className={classnames('form-control form-control-lg', {\n          'is-invalid': error,\n        })}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      />\n      {error && <div className='invalid-feedback'>{error}</div>}\n    </div>\n  );\n};\n\nTextInputGroup.defaultProps = {\n  type: 'text',\n};\n\nTextInputGroup.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string,\n};\n\nexport default TextInputGroup;\n","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport { v4 as uuid } from 'uuid';\nimport axios from 'axios';\n\nclass AddContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {},\n  };\n\n  onSubmit = async (dispatch, e) => {\n    e.preventDefault();\n\n    const { name, email, phone } = this.state; // Everything is in the state\n\n    // Check for errors\n    if (name === '') {\n      this.setState({ errors: { name: 'Name is required' } });\n      return;\n    }\n\n    if (email === '') {\n      this.setState({ errors: { email: 'Email is required' } });\n      return;\n    }\n\n    if (phone === '') {\n      this.setState({ errors: { phone: 'Phone is required' } });\n      return;\n    }\n\n    const newContact = {\n      //Construct a new contact, uuid build new id\n      name,\n      email,\n      phone,\n    };\n\n    const res = await axios.post(\n      'https://jsonplaceholder.typicode.com/users',\n      newContact\n    );\n    dispatch({ type: 'ADD_CONTACT', payload: res.data });\n    // use dispatch function that refer to the type in reducer\n\n    // Clear state after adding new contact\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {},\n    });\n\n    this.props.history.push('/');\n  };\n\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className='card mb-3'>\n              <div className='card-header'>Add Contact</div>\n              <div className='card-body'>\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label='Name'\n                    name='name'\n                    placeholder='Enter Name'\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label='Email'\n                    name='email'\n                    type='email'\n                    placeholder='Enter Email'\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label='Phone'\n                    name='phone'\n                    placeholder='Enter Phone'\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n\n                  <input\n                    type='submit'\n                    value='Add Contact'\n                    className=' btn btn-light btn-block'\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default AddContact;\n","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport { v4 as uuid } from 'uuid';\nimport axios from 'axios';\n\nclass EditContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {},\n  };\n\n  async componentDidMount() {\n    const { id } = this.props.match.params;\n    const res = await axios.get(\n      `https://jsonplaceholder.typicode.com/users/${id}`\n    );\n\n    const contact = res.data;\n\n    this.setState({\n      name: contact.name,\n      email: contact.email,\n      phone: contact.phone,\n    });\n  }\n\n  onSubmit = async (dispatch, e) => {\n    e.preventDefault();\n\n    const { name, email, phone } = this.state; // Everything is in the state\n\n    // Check for errors\n    if (name === '') {\n      this.setState({ errors: { name: 'Name is required' } });\n      return;\n    }\n\n    if (email === '') {\n      this.setState({ errors: { email: 'Email is required' } });\n      return;\n    }\n\n    if (phone === '') {\n      this.setState({ errors: { phone: 'Phone is required' } });\n      return;\n    }\n\n    const { id } = this.props.match.params;\n\n    const updateContact = {\n      name,\n      email,\n      phone,\n    };\n\n    const res = await axios.put(\n      `https://jsonplaceholder.typicode.com/users/${id}`,\n      updateContact\n    );\n\n    dispatch({ type: 'UPDATE_CONTACT', payload: res.data });\n\n    // Clear state after adding new contact\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {},\n    });\n\n    this.props.history.push('/');\n  };\n\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className='card mb-3'>\n              <div className='card-header'>Edit Contact</div>\n              <div className='card-body'>\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label='Name'\n                    name='name'\n                    placeholder='Enter Name'\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label='Email'\n                    name='email'\n                    type='email'\n                    placeholder='Enter Email'\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label='Phone'\n                    name='phone'\n                    placeholder='Enter Phone'\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n\n                  <input\n                    type='submit'\n                    value='Update Contact'\n                    className=' btn btn-light btn-block'\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default EditContact;\n","import React, { Component } from 'react';\n\nclass Test extends Component {\n  state = {\n    title: '',\n    body: '',\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/posts/1')\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          title: data.title,\n          body: data.body,\n        })\n      );\n  }\n\n  render() {\n    const { title, body } = this.state;\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{body}</p>\n      </div>\n    );\n  }\n}\n\nexport default Test;\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFoundPage from './components/pages/NotFoundPage';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Contacts from './components/contact/Contacts';\nimport AddContact from './components/contact/AddContact';\nimport EditContact from './components/contact/EditContact';\nimport Test from './components/test/Test';\nimport { Provider } from './context';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n          <div className='App'>\n            <Header branding='Contact Manager' />\n            <div className='container'>\n              <Switch>\n                <Route exact path='/' component={Contacts} />\n                <Route exact path='/contact/add' component={AddContact} />\n                <Route exact path='/contact/edit/:id' component={EditContact} />\n                <Route exact path='/about' component={About} />\n                <Route exact path='/test' component={Test} />\n                <Route component={NotFoundPage} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}